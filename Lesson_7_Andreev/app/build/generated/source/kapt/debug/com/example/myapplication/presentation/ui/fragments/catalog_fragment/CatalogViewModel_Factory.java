// Generated by Dagger (https://dagger.dev).
package com.example.myapplication.presentation.ui.fragments.catalog_fragment;

import com.example.myapplication.domen.usecase.ProductUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class CatalogViewModel_Factory implements Factory<CatalogViewModel> {
  private final Provider<ProductUseCase> productUseCaseProvider;

  public CatalogViewModel_Factory(Provider<ProductUseCase> productUseCaseProvider) {
    this.productUseCaseProvider = productUseCaseProvider;
  }

  @Override
  public CatalogViewModel get() {
    return newInstance(productUseCaseProvider.get());
  }

  public static CatalogViewModel_Factory create(Provider<ProductUseCase> productUseCaseProvider) {
    return new CatalogViewModel_Factory(productUseCaseProvider);
  }

  public static CatalogViewModel newInstance(ProductUseCase productUseCase) {
    return new CatalogViewModel(productUseCase);
  }
}
