// Generated by Dagger (https://dagger.dev).
package com.example.myapplication.domen.usecase;

import com.example.myapplication.data.repository.AccessRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ProductUseCase_Factory implements Factory<ProductUseCase> {
  private final Provider<AccessRepository> repositoryProvider;

  public ProductUseCase_Factory(Provider<AccessRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public ProductUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static ProductUseCase_Factory create(Provider<AccessRepository> repositoryProvider) {
    return new ProductUseCase_Factory(repositoryProvider);
  }

  public static ProductUseCase newInstance(AccessRepository repository) {
    return new ProductUseCase(repository);
  }
}
