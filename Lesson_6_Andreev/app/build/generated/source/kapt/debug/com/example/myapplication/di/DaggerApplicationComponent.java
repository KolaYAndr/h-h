// Generated by Dagger (https://dagger.dev).
package com.example.myapplication.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.example.myapplication.MyApplication;
import com.example.myapplication.data.ApiLesson;
import com.example.myapplication.data.repository.LoginRepository;
import com.example.myapplication.data.repository.LoginRepository_Factory;
import com.example.myapplication.data.repository.PreferenceStorage;
import com.example.myapplication.data.repository.PreferenceStorage_Factory;
import com.example.myapplication.domen.usecase.LoginUseCase;
import com.example.myapplication.domen.usecase.LoginUseCase_Factory;
import com.example.myapplication.presentation.ui.MainActivity;
import com.example.myapplication.presentation.ui.fragments.catalog_fragment.CatalogFragment;
import com.example.myapplication.presentation.ui.fragments.sign_in_fragment.SignInFragment;
import com.example.myapplication.presentation.ui.fragments.sign_in_fragment.SignInFragment_MembersInjector;
import com.example.myapplication.presentation.ui.fragments.sign_in_fragment.SignInViewModel;
import com.example.myapplication.presentation.ui.fragments.sign_in_fragment.SignInViewModel_Factory;
import com.google.gson.Gson;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerApplicationComponent {
  private DaggerApplicationComponent() {
  }

  public static ApplicationComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements ApplicationComponent.Factory {
    @Override
    public ApplicationComponent create(MyApplication applicationContext) {
      Preconditions.checkNotNull(applicationContext);
      return new ApplicationComponentImpl(new NetworkModule(), new ApplicationModule(), applicationContext);
    }
  }

  private static final class MainActivitySubcomponentFactory implements ActivityModule_ProvideMainActivity.MainActivitySubcomponent.Factory {
    private final ApplicationComponentImpl applicationComponentImpl;

    private MainActivitySubcomponentFactory(ApplicationComponentImpl applicationComponentImpl) {
      this.applicationComponentImpl = applicationComponentImpl;
    }

    @Override
    public ActivityModule_ProvideMainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(applicationComponentImpl, arg0);
    }
  }

  private static final class SignInFragmentSubcomponentFactory implements FragmentModule_SignInFragment.SignInFragmentSubcomponent.Factory {
    private final ApplicationComponentImpl applicationComponentImpl;

    private SignInFragmentSubcomponentFactory(ApplicationComponentImpl applicationComponentImpl) {
      this.applicationComponentImpl = applicationComponentImpl;
    }

    @Override
    public FragmentModule_SignInFragment.SignInFragmentSubcomponent create(SignInFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SignInFragmentSubcomponentImpl(applicationComponentImpl, arg0);
    }
  }

  private static final class CatalogFragmentSubcomponentFactory implements FragmentModule_CatalogFragment.CatalogFragmentSubcomponent.Factory {
    private final ApplicationComponentImpl applicationComponentImpl;

    private CatalogFragmentSubcomponentFactory(ApplicationComponentImpl applicationComponentImpl) {
      this.applicationComponentImpl = applicationComponentImpl;
    }

    @Override
    public FragmentModule_CatalogFragment.CatalogFragmentSubcomponent create(CatalogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new CatalogFragmentSubcomponentImpl(applicationComponentImpl, arg0);
    }
  }

  private static final class MainActivitySubcomponentImpl implements ActivityModule_ProvideMainActivity.MainActivitySubcomponent {
    private final ApplicationComponentImpl applicationComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl = this;

    private MainActivitySubcomponentImpl(ApplicationComponentImpl applicationComponentImpl,
        MainActivity arg0Param) {
      this.applicationComponentImpl = applicationComponentImpl;


    }

    @Override
    public void inject(MainActivity arg0) {
    }
  }

  private static final class SignInFragmentSubcomponentImpl implements FragmentModule_SignInFragment.SignInFragmentSubcomponent {
    private final ApplicationComponentImpl applicationComponentImpl;

    private final SignInFragmentSubcomponentImpl signInFragmentSubcomponentImpl = this;

    private SignInFragmentSubcomponentImpl(ApplicationComponentImpl applicationComponentImpl,
        SignInFragment arg0Param) {
      this.applicationComponentImpl = applicationComponentImpl;


    }

    @Override
    public void inject(SignInFragment arg0) {
      injectSignInFragment(arg0);
    }

    private SignInFragment injectSignInFragment(SignInFragment instance) {
      SignInFragment_MembersInjector.injectViewModelFactory(instance, applicationComponentImpl.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class CatalogFragmentSubcomponentImpl implements FragmentModule_CatalogFragment.CatalogFragmentSubcomponent {
    private final ApplicationComponentImpl applicationComponentImpl;

    private final CatalogFragmentSubcomponentImpl catalogFragmentSubcomponentImpl = this;

    private CatalogFragmentSubcomponentImpl(ApplicationComponentImpl applicationComponentImpl,
        CatalogFragment arg0Param) {
      this.applicationComponentImpl = applicationComponentImpl;


    }

    @Override
    public void inject(CatalogFragment arg0) {
    }
  }

  private static final class ApplicationComponentImpl implements ApplicationComponent {
    private final ApplicationComponentImpl applicationComponentImpl = this;

    private Provider<ActivityModule_ProvideMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

    private Provider<FragmentModule_SignInFragment.SignInFragmentSubcomponent.Factory> signInFragmentSubcomponentFactoryProvider;

    private Provider<FragmentModule_CatalogFragment.CatalogFragmentSubcomponent.Factory> catalogFragmentSubcomponentFactoryProvider;

    private Provider<MyApplication> applicationContextProvider;

    private Provider<Context> provideApplicationContextProvider;

    private Provider<PreferenceStorage> preferenceStorageProvider;

    private Provider<OkHttpClient> provideOkHttpProvider;

    private Provider<Gson> provideGsonProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<ApiLesson> provideApiServiceProvider;

    private Provider<LoginRepository> loginRepositoryProvider;

    private Provider<LoginUseCase> loginUseCaseProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

    private Provider<ViewModelFactory> viewModelFactoryProvider;

    private ApplicationComponentImpl(NetworkModule networkModuleParam,
        ApplicationModule applicationModuleParam, MyApplication applicationContextParam) {

      initialize(networkModuleParam, applicationModuleParam, applicationContextParam);

    }

    private Map<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, ((Provider) mainActivitySubcomponentFactoryProvider)).put(SignInFragment.class, ((Provider) signInFragmentSubcomponentFactoryProvider)).put(CatalogFragment.class, ((Provider) catalogFragmentSubcomponentFactoryProvider)).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<dagger.android.AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NetworkModule networkModuleParam,
        final ApplicationModule applicationModuleParam,
        final MyApplication applicationContextParam) {
      this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ProvideMainActivity.MainActivitySubcomponent.Factory>() {
        @Override
        public ActivityModule_ProvideMainActivity.MainActivitySubcomponent.Factory get() {
          return new MainActivitySubcomponentFactory(applicationComponentImpl);
        }
      };
      this.signInFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_SignInFragment.SignInFragmentSubcomponent.Factory>() {
        @Override
        public FragmentModule_SignInFragment.SignInFragmentSubcomponent.Factory get() {
          return new SignInFragmentSubcomponentFactory(applicationComponentImpl);
        }
      };
      this.catalogFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_CatalogFragment.CatalogFragmentSubcomponent.Factory>() {
        @Override
        public FragmentModule_CatalogFragment.CatalogFragmentSubcomponent.Factory get() {
          return new CatalogFragmentSubcomponentFactory(applicationComponentImpl);
        }
      };
      this.applicationContextProvider = InstanceFactory.create(applicationContextParam);
      this.provideApplicationContextProvider = ApplicationModule_ProvideApplicationContextFactory.create(applicationModuleParam, applicationContextProvider);
      this.preferenceStorageProvider = DoubleCheck.provider(PreferenceStorage_Factory.create(provideApplicationContextProvider));
      this.provideOkHttpProvider = NetworkModule_ProvideOkHttpFactory.create(networkModuleParam, preferenceStorageProvider);
      this.provideGsonProvider = NetworkModule_ProvideGsonFactory.create(networkModuleParam);
      this.provideRetrofitProvider = NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideOkHttpProvider, provideGsonProvider);
      this.provideApiServiceProvider = NetworkModule_ProvideApiServiceFactory.create(networkModuleParam, provideRetrofitProvider);
      this.loginRepositoryProvider = LoginRepository_Factory.create(provideApiServiceProvider);
      this.loginUseCaseProvider = LoginUseCase_Factory.create(loginRepositoryProvider, preferenceStorageProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(loginUseCaseProvider);
      this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(SignInViewModel.class, ((Provider) signInViewModelProvider)).build();
      this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(MyApplication arg0) {
      injectMyApplication(arg0);
    }

    private MyApplication injectMyApplication(MyApplication instance) {
      DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }
}
