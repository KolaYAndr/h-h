// Generated by Dagger (https://dagger.dev).
package com.example.myapplication.di;

import com.example.myapplication.data.repository.PreferenceStorage;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvideOkHttpFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<PreferenceStorage> preferenceStorageProvider;

  public NetworkModule_ProvideOkHttpFactory(NetworkModule module,
      Provider<PreferenceStorage> preferenceStorageProvider) {
    this.module = module;
    this.preferenceStorageProvider = preferenceStorageProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttp(module, preferenceStorageProvider.get());
  }

  public static NetworkModule_ProvideOkHttpFactory create(NetworkModule module,
      Provider<PreferenceStorage> preferenceStorageProvider) {
    return new NetworkModule_ProvideOkHttpFactory(module, preferenceStorageProvider);
  }

  public static OkHttpClient provideOkHttp(NetworkModule instance,
      PreferenceStorage preferenceStorage) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttp(preferenceStorage));
  }
}
