// Generated by Dagger (https://dagger.dev).
package com.example.myapplication.domen.usecase;

import com.example.myapplication.data.repository.LoginRepository;
import com.example.myapplication.data.repository.PreferenceStorage;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LoginUseCase_Factory implements Factory<LoginUseCase> {
  private final Provider<LoginRepository> repositoryProvider;

  private final Provider<PreferenceStorage> preferenceStorageProvider;

  public LoginUseCase_Factory(Provider<LoginRepository> repositoryProvider,
      Provider<PreferenceStorage> preferenceStorageProvider) {
    this.repositoryProvider = repositoryProvider;
    this.preferenceStorageProvider = preferenceStorageProvider;
  }

  @Override
  public LoginUseCase get() {
    return newInstance(repositoryProvider.get(), preferenceStorageProvider.get());
  }

  public static LoginUseCase_Factory create(Provider<LoginRepository> repositoryProvider,
      Provider<PreferenceStorage> preferenceStorageProvider) {
    return new LoginUseCase_Factory(repositoryProvider, preferenceStorageProvider);
  }

  public static LoginUseCase newInstance(LoginRepository repository,
      PreferenceStorage preferenceStorage) {
    return new LoginUseCase(repository, preferenceStorage);
  }
}
